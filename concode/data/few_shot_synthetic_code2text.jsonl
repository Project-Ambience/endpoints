{"input": "You are a code documentation assistant. Given a code snippet, generate a concise comment that summarises what the code does.\ndef merge_sorted_arrays(arr1, arr2):\n    result = []\n    i = j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            result.append(arr1[i])\n            i += 1\n        else:\n            result.append(arr2[j])\n            j += 1\n    \n    result.extend(arr1[i:])\n    result.extend(arr2[j:])\n    return result", "output": "# Merges two sorted arrays into a single sorted array using two pointers"}
{"input": "You are a code documentation assistant. Given a code snippet, generate a concise comment that summarises what the code does.\npublic static String longestCommonPrefix(String[] strs) {\n    if (strs.length == 0) return \"\";\n    \n    String prefix = strs[0];\n    for (int i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) != 0) {\n            prefix = prefix.substring(0, prefix.length() - 1);\n            if (prefix.isEmpty()) return \"\";\n        }\n    }\n    return prefix;\n}", "output": "// Finds the longest common prefix string among an array of strings"}
{"input": "You are a code documentation assistant. Given a code snippet, generate a concise comment that summarises what the code does.\ndef is_palindrome(s):\n    cleaned = ''.join(char.lower() for char in s if char.isalnum())\n    return cleaned == cleaned[::-1]", "output": "# Checks if a string is a palindrome, ignoring case and non-alphanumeric characters"}
{"input": "You are a code documentation assistant. Given a code snippet, generate a concise comment that summarises what the code does.\npublic void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}", "output": "// Sorts an array of integers in ascending order using bubble sort algorithm"}
{"input": "You are a code documentation assistant. Given a code snippet, generate a concise comment that summarises what the code does.\ndef fibonacci_memoized(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n <= 2:\n        return 1\n    memo[n] = fibonacci_memoized(n-1, memo) + fibonacci_memoized(n-2, memo)\n    return memo[n]", "output": "# Calculates the nth Fibonacci number using memoization for optimization"}